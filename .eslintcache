[{"C:\\xammp\\htdocs\\my-app\\src\\App.tsx":"1","C:\\xammp\\htdocs\\my-app\\src\\components\\Navbar.tsx":"2","C:\\xammp\\htdocs\\my-app\\src\\components\\TodoForm.tsx":"3","C:\\xammp\\htdocs\\my-app\\src\\components\\TodoList.tsx":"4","C:\\xammp\\htdocs\\my-app\\src\\pages\\TodosPage.tsx":"5","C:\\xammp\\htdocs\\my-app\\src\\index.tsx":"6","C:\\xammp\\htdocs\\my-app\\src\\pages\\AboutPage.tsx":"7","C:\\xammp\\htdocs\\my-app\\src\\reportWebVitals.ts":"8","C:\\xammp\\htdocs\\my-app\\src\\hooks\\useLocalStorage.ts":"9"},{"size":614,"mtime":1607084724307,"results":"10","hashOfConfig":"11"},{"size":637,"mtime":1607083264270,"results":"12","hashOfConfig":"11"},{"size":1207,"mtime":1607083666698,"results":"13","hashOfConfig":"11"},{"size":1767,"mtime":1607603664040,"results":"14","hashOfConfig":"11"},{"size":1603,"mtime":1607603872164,"results":"15","hashOfConfig":"11"},{"size":510,"mtime":1607084259655,"results":"16","hashOfConfig":"11"},{"size":630,"mtime":1607603872129,"results":"17","hashOfConfig":"11"},{"size":425,"mtime":1606817198712,"results":"18","hashOfConfig":"11"},{"size":818,"mtime":1607929149294,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1j141bm",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\xammp\\htdocs\\my-app\\src\\App.tsx",[],["42","43"],"C:\\xammp\\htdocs\\my-app\\src\\components\\Navbar.tsx",[],"C:\\xammp\\htdocs\\my-app\\src\\components\\TodoForm.tsx",[],"C:\\xammp\\htdocs\\my-app\\src\\components\\TodoList.tsx",[],"C:\\xammp\\htdocs\\my-app\\src\\pages\\TodosPage.tsx",["44","45"],"import React, {useState, useEffect} from 'react'\r\nimport {TodoForm} from '../components/TodoForm'\r\nimport {TodoList} from '../components/TodoList'\r\nimport {ITodo} from '../interfaces'\r\nimport useLocalStorage from '../hooks/useLocalStorage'\r\n\r\ndeclare var confirm: (question: string) => boolean\r\n\r\nexport const TodosPage: React.FC = () => {\r\n    console.log(555);\r\n    const [todos, setTodos] = useLocalStorage<ITodo[]>('todos', []);\r\n\r\n\r\n    const addHandler = (title: string) => {\r\n        const newTodo: ITodo = {\r\n            title: title,\r\n            id: Date.now(),\r\n            completed: false\r\n        };\r\n        setTodos((prev: ITodo[]) => [newTodo, ...prev])\r\n    };\r\n    const toggleHandler = (id: number) => {\r\n        setTodos((prev: ITodo[]) =>\r\n            prev.map(todo => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        completed: !todo.completed\r\n                    }\r\n                }\r\n                return todo\r\n            }))\r\n    }\r\n    const removeHandler = (id: number) => {\r\n        const shoudRemove = confirm('Вы уверены, что хотите удалить элемент?')\r\n        if (shoudRemove) {\r\n            setTodos((prev: ITodo[]) => prev.filter(todo => todo.id !== id))\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TodoForm onAdd={addHandler}/>\r\n\r\n            <TodoList\r\n                todos={todos}\r\n                onToggle={toggleHandler}\r\n                onRemove={removeHandler}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}",["46","47"],"C:\\xammp\\htdocs\\my-app\\src\\index.tsx",[],"C:\\xammp\\htdocs\\my-app\\src\\pages\\AboutPage.tsx",[],"C:\\xammp\\htdocs\\my-app\\src\\reportWebVitals.ts",[],["48","49"],"C:\\xammp\\htdocs\\my-app\\src\\hooks\\useLocalStorage.ts",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":1,"column":16,"nodeType":"56","messageId":"57","endLine":1,"endColumn":24},{"ruleId":"54","severity":1,"message":"58","line":1,"column":26,"nodeType":"56","messageId":"57","endLine":1,"endColumn":35},{"ruleId":"50","replacedBy":"59"},{"ruleId":"52","replacedBy":"60"},{"ruleId":"50","replacedBy":"61"},{"ruleId":"52","replacedBy":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.",["63"],["64"],["63"],["64"],"no-global-assign","no-unsafe-negation"]